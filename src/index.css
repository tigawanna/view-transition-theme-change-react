@import url('https://unpkg.com/normalize.css') layer(normalize);

@layer normalize, base, demo;

@font-face {
  font-family: 'Departure Mono';
  src: url('https://assets.codepen.io/605876/DepartureMono-Regular.woff');
}

@layer demo {
  .content {
    padding: 0rem;
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 1rem;
    align-items: flex-start;
    max-width: 50vw;
    align-self: flex-end;
  }

  a:not(.bear-link) {
    padding: 1rem 2rem;
    border-radius: 12px;
    color: var(--bg);
    text-decoration-line: none;
    background: var(--color);
    font-weight: bold;
    transition: background 0.2s;
  }
  
  html {
    color-scheme: light dark;
  }
  
  [data-theme='light'] {
    color-scheme: light only;
  }
  [data-theme='dark'] {
    color-scheme: dark only;
  }

  [data-theme='dark'] a:is(:hover, :focus-visible) {
    background: hsl(0 0% 80%);
  }

  a:is(:hover, :focus-visible) {
    background: hsl(0 0% 50%);
  }

  .images {
    flex: 1;
  }

  footer {
    opacity: 0;
    padding: 1rem;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  :root {
    --color: hsl(0 0% 6%);
    --bg: hsl(0 0% 98%);
  }

  h1 {
    font-family: 'Departure Mono', monospace;
    font-size: clamp(2rem, 4vw + 1rem, 8rem);
    line-height: 1;
    font-weight: 300;
    margin: 0;
  }

  main {
    display: flex;
    flex: 1;
    align-items: center;
    padding: 2rem;
    gap: 4rem;
    max-width: 100vw;
  }

  pre {
    max-width: 100%;
  }

  p {
    width: 60ch;
    max-width: 100%;
  }

  [data-theme='dark'] {
    --color: hsl(0 0% 98%);
    --bg: hsl(0 0% 6%);
  }

  .theme-toggle {
    color: var(--color);
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    padding: 0;
    border: 0;
    display: grid;
    place-items: center;
    border-radius: 12px;
    background: transparent;
    transition: background 0.2s;
    cursor: pointer;
    z-index: 10;
  }

  .theme-toggle:is(:hover, :focus-visible) {
    background: color-mix(in hsl, canvas, canvasText 15%);
  }

  h1 {
    color: light-dark(hsl(10 90% 50%), hsl(25 84% 45%));
  }

  .images {
    width: 100%;
    height: 80vh;
    min-width: 200px;
  }
  img {
    max-width: 100%;
    height: 100%;
    object-fit: cover;
    width: 100%;
    background: hsl(0 0% 50%);
    border-radius: 1rem;
    align-self: end;
    box-shadow: 0 0 2px white;
  }

  img:nth-of-type(2),
  [data-theme='dark'] img:nth-of-type(1),
  [data-theme='light'] img:nth-of-type(2) {
    display: none;
  }

  [data-theme='dark'] img:nth-of-type(2) {
    display: block;
  }

  .theme-toggle[aria-pressed='true'] svg path:last-of-type {
    display: block;
  }

  .theme-toggle svg {
    color: canvasText;
    width: 50%;
  }

  .theme-toggle[aria-pressed='true'] svg path:first-of-type,
  .theme-toggle svg path:last-of-type {
    display: none;
  }

 
}

@layer base {
  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }
/* font size stuff : view transition works without this */
  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    background: canvas;
    color: canvasText;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }
/* adds grid background */
  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    bottom: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}
